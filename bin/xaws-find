#!/bin/bash
set -euo pipefail
#set -x

# private version of davinci_clone
_DAVINCI_CLONE="${DAVINCI_CLONE}"
JQ_PATH="${_DAVINCI_CLONE}"
TABLEME="${HOME}/go/bin/tableme"

usage() {
  cat <<HERE
usage: aws-find SUBCMD [-h | options]

SUBCMD:

help
ami
asg
ec2
ecr
elb
snapshot
volume

Recommendation:

add this to your bashrc/zshrc: alias af='aws-find'
HERE
}

elb() {
  local args="$*"
  aws elb describe-load-balancers \
    | jq -r -f "${JQ_PATH}/jq/aws-find/elb.jq" \
    | ${TABLEME} NAME SCHEME INSTANCES LISTENERS CREATED
}


ami() {
  local amis=$(
    aws ec2 describe-images --owners=self
  )
  echo "${amis}" \
    | jq -r '.Images
      | sort_by(.CreationDate)
      | reverse
      | map([.ImageId, .Name, .State, .Public, .CreationDate])
      | .[] | @csv' \
    | ${TABLEME} ID NAME STATE PUBLIC CREATED
}

snapshot() {
  aws ec2 describe-snapshots --owner-ids=self \
    | jq -r '.Snapshots
      | sort_by(.StartTime)
      | reverse
      | map([.SnapshotId, .State, .Description, .Encrypted, .VolumeId, .StartTime])
      | .[] | @csv' \
    | ${TABLEME} ID STATE DESC ENCRYPTED VOLUME_ID START_TIME
}

volume() {
  aws ec2 describe-volumes \
    | jq -r '.Volumes
      | sort_by(.CreateTime)
      | reverse
      | map([.VolumeId, .SnapshotId, .AvailabilityZone, .State, .Encrypted, .Size, .CreateTime])
      | .[] | @csv' \
    | ${TABLEME} ID SNAPSHOT_ID AZ STATE ENCRYPTED SIZE CREATED
}

main() {
  #[[ -z "${DAVINCI_ENV}" ]] && { echo "must set davinci-env" ; exit 1 ; }

  if [[ "$#" == "0" ]]; then
    usage
    exit 0
  fi

  if [[ "$1" == "-h" ]] || [[ "$1" == "help" ]]; then
    usage
    exit 0
  fi

  local fn="${1:?must pass arg: asg, elb, ec2, ami, volume, ecr}" ; shift
  local other_args="$*"

  if declare -F | grep -q "${fn}"; then
    "${fn}" ${other_args}
  else
    echo "da-fuk? $fn"
    exit 1
  fi
}

main "$@"
